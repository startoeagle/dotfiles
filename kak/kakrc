evaluate-commands %sh{
        plugins="$kak_config/plugins"
        mkdir -p "$plugins"
        [ ! -e "$plugins/plug.kak" ] && \
            git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
            printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload
plug "kak-lsp/kak-lsp" do %{
        cargo install --locked --force --path .
} config %{
    define-command lsp-restart %{ 
        lsp-stop
        lsp-start
    }
}
plug "eraserhd/parinfer-rust" do %{
    cargo install --force --path .
} config %{
    hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
        parinfer-enable-window -smart
    }
}

plug "andreyorst/fzf.kak"
plug "andreyorst/powerline.kak"  defer powerline %{
    powerline-separator global none
} defer powerline_gruvbox %{
    powerline-theme default
} config %{
    powerline-start
}

plug "alexherbo2/auto-pairs.kak" config %{
    set-option global auto_pairs ( ) { } [ ] '"' '"' "'" "'" ` ` “ ” ‘ ’ « » ‹ ›
    enable-auto-pairs
}

set global tabstop 4
set global indentwidth 4
plug "andreyorst/smarttab.kak" defer smarttab %{
        # when `backspace' is pressed, 4 spaces are deleted at once
     set-option global softtabstop 4
     } config %{
            # these languages will use `expandtab' behavior, uses spaces for everything
            hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|pythone|elixir|nim) expandtab
            # these languages will use `noexpandtab' behavior
            hook global WinSetOption filetype=(makefile|gas) noexpandtab
            # these languages will use `smarttab' behavior
            hook global WinSetOption filetype=(c|cpp) smarttab
}

plug "h-youhei/kakoune-surround" config %{
    declare-user-mode surround
    map global surround s %{: surround<ret>} -docstring "surround"
    map global surround c %{: change-surround<ret>} -docstring "change"
    map global surround d %{: delete-surround<ret>} -docstring "delete"
    map global surround t %{: select-surrounding-tag<ret>} -docstring "select tag"
    map global user m %{: enter-user-mode surround<ret>} -docstring "Surround mode"
}
plug "lePerdu/kakboard" %{
        hook global WinCreate .* %{ kakboard-enable }
}
  
add-highlighter global/ number-lines -relative

hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
        lsp-enable-window
        lsp-auto-signature-help-enable
        map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
}

hook global WinSetOption filetype=(c|cpp) %{
    set buffer tabstop 2
    set buffer indentwidth 2
    set-option buffer softtabstop 2
}

hook global WinSetOption filetype=rust %{
    hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window rust-inlay-hints
    }
}

hook global WinSetOption filetype=(rust|python|c|cpp|zig) %{
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
    }
}

declare-user-mode config
map global config c %{: edit ~/.config/kak/kakrc <ret>} -docstring "Goto kakrc"
map global config l %{: edit ~/.config/kak-lsp/kak-lsp.toml <ret>} -docstring "Goto kak-lsp"

map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"
map global user c %{: enter-user-mode config<ret>} -docstring "Configs"
map global user f %{: fzf-mode<ret>} -docstring "Enter fzf commands"
map global user v %{: tmux-terminal-horizontal kak -c %val{session} <ret>} -docstring "New split to the right"
map global user k :comment-line<ret> -docstring "Comment selection"

# remap @ to visual mode
map global normal @ v

declare-user-mode sel
map global sel a %{<a-a>} -docstring "Select around"
map global sel i %{<a-i>} -docstring "Select inner"
map global normal v %{: enter-user-mode sel<ret>}

colorscheme mygruvbox
set-face global LineNumbers value
set-face global comment yellow

hook global InsertChar k %{ try %{
      exec -draft hH <a-k>jk<ret> d
        exec <esc>
}}
hook global WinSetOption filetype=(markdown|txt|org) %{
    add-highlighter buffer/ wrap -width 120 -indent -word
}
hook global BufCreate .*\.(ino)$ %{
    set-option buffer filetype arduino
}
